<?php

namespace App\Http\Controllers;
use App\Models\Teacher; 
use App\Models\ClassModel;
use App\Models\Department;
use App\Models\AcademicYear;
use Illuminate\Http\Request;

class ClassController extends Controller
{
    // Hi·ªÉn th·ªã danh s√°ch l·ªõp
   public function index(Request $request)
    {   
        $query = ClassModel::with(['department', 'academicYear', 'teacher']);  

        $user = auth()->user();

        // üßë‚Äçüéì N·∫øu l√† sinh vi√™n: ch·ªâ xem ƒë∆∞·ª£c l·ªõp c·ªßa ch√≠nh m√¨nh
        if ($user->role === 'student') {
            $student = $user->student; // l·∫•y b·∫£n ghi Student t∆∞∆°ng ·ª©ng
            if ($student && $student->class_id) {
                $query->where('id', $student->class_id);
            } else {
                // n·∫øu sinh vi√™n ch∆∞a c√≥ l·ªõp th√¨ tr·∫£ danh s√°ch tr·ªëng
                $query->whereRaw('1=0');
            }
        }

        // üë®‚Äçüè´ N·∫øu l√† gi√°o vi√™n: ch·ªâ xem l·ªõp m√¨nh ph·ª• tr√°ch
        elseif ($user->role === 'teacher') {
            $teacherId = $user->teacher->id ?? null;
            if ($teacherId) {
                $query->where('teacher_id', $teacherId);
            } else {
                $query->whereRaw('1=0');
            }
        }

        // üîç T√¨m ki·∫øm
        if ($request->has('search') && $request->search != '') {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('class_code', 'like', "%$search%")
                ->orWhere('class_name', 'like', "%$search%");
            });
        }

        // üè´ L·ªçc theo khoa
        if ($request->has('department_id') && $request->department_id != '') {
            $query->where('department_id', $request->department_id);
        }

        $classes = $query->paginate(10);
        $departments = Department::all();
        
        return view('classes.index', compact('classes', 'departments'));
    }


    // Form th√™m m·ªõi
    public function create()
    {
        $departments = Department::all();
        $teachers = Teacher::all();
        $academicYears = AcademicYear::all();
        return view('classes.create', compact('departments', 'teachers', 'academicYears'));
    }

    // L∆∞u l·ªõp m·ªõi
    public function store(Request $request)
    {
        $request->validate([
            'class_code' => 'required|unique:classes,class_code|max:20',
            'class_name' => 'required|max:100',
            'department_id' => 'required|exists:departments,id',
            'academic_year_id' => 'required|exists:academic_years,id'
        ]);

        ClassModel::create($request->all());
        return redirect()->route('classes.index')->with('success', 'Th√™m l·ªõp th√†nh c√¥ng!');
    }

    // Form ch·ªânh s·ª≠a
    public function edit($id)
    {
        $class = ClassModel::findOrFail($id);
        $departments = Department::all();
        $teachers = Teacher::all();
        $academicYears = AcademicYear::all();
        return view('classes.edit', compact('class', 'departments', 'academicYears', 'teachers'));
    }

    // C·∫≠p nh·∫≠t
    public function update(Request $request, $id)
    {
        $class = ClassModel::findOrFail($id);

        $request->validate([
            'class_code' => 'required|max:20|unique:classes,class_code,' . $class->id,
            'class_name' => 'required|max:100',
            'department_id' => 'required|exists:departments,id',
            'academic_year_id' => 'required|exists:academic_years,id',
            'teacher_id' => 'nullable|exists:teachers,id',
        ]);

        $class->update($request->all());
        return redirect()->route('classes.index')->with('success', 'C·∫≠p nh·∫≠t l·ªõp th√†nh c√¥ng!');
    }

    // Xo√°
    public function destroy($id)
    {
        ClassModel::destroy($id);
        return redirect()->route('classes.index')->with('success', 'X√≥a l·ªõp th√†nh c√¥ng!');
    }
}
